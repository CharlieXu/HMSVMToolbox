function result=gen_path(rproc_PAR)
% result=gen_path(rproc_PAR)

res=struct ;

%%% Viterbi decoding
  [result.pred_path result.true_path result.pred_path_mmv] ...
      = decode_Viterbi(rproc_PAR.obs_seq, rproc_PAR.transition_scores, rproc_PAR.score_plifs, ...
                       rproc_PAR.PAR, rproc_PAR.true_label_seq, rproc_PAR.true_state_seq);

  if rproc_PAR.PAR.extra_checks,
    result.w = weights_to_vector(result.pred_path.transition_weights, ...
                                 result.pred_path.plif_weights, rproc_PAR.state_model, ...
                                 rproc_PAR.res_map, rproc_PAR.PAR);
    assert(abs(result.w*rproc_PAR.res(1:rproc_PAR.PAR.num_param) - result.pred_path.score) < rproc_PAR.PAR.epsilon);
    
    result.w = weights_to_vector(rproc_PAR.pred_path_mmv.transition_weights, ...
                                 rproc_PAR.pred_path_mmv.plif_weights, rproc_PAR.state_model, ...
                                 rproc_PAR.res_map, rproc_PAR.PAR);
    assert(abs(result.w*rproc_PAR.res(1:rproc_PAR.PAR.num_param) - result.pred_path_mmv.score) < rproc_PAR.PAR.epsilon);
  end
  
  result.w_p = weights_to_vector(rproc_PAR.true_path.transition_weights, ...
                                 rproc_PAR.true_path.plif_weights, rproc_PAR.state_model, ...
                                 rproc_PAR.res_map, rproc_PAR.PAR);
  result.w_n = weights_to_vector(result.pred_path_mmv.transition_weights, ...
                                 result.pred_path_mmv.plif_weights, rproc_PAR.state_model, ...
                                 rproc_PAR.res_map, rproc_PAR.PAR);
  